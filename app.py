# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11mcW_OckitLy5_d8bXW1vIbxFaagSpao
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from imblearn.over_sampling import SMOTE
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle

#Membaca Dataset
df= pd.read_csv('ObesityDataSet.csv')

import pandas as pd

file_id = '11k0xpcPsXget04fLLnmSanju2VQnwdHI'
url = f'https://drive.google.com/uc?id={file_id}'

df = pd.read_csv(url)
df.head()

# Melihat Struktur Dataset
df.head()

"""### **2. Exploratory Data Analysis (EDA)**

Kesimpulan: Dataset terdiri dari 2111 baris dan 17 fitur. Tidak ditemukan missing values yang signifikan. Distribusi target tidak seimbang. Beberapa fitur memiliki outlier berdasarkan boxplot. Terdapat korelasi kuat antara berat badan dan kategori obesitas.
"""

# Struktur Data
print("\nInfo Dataset:")
print(df.info())

# Statistik Deskriptif
print("\nDescriptive Statistics:")
print(df.describe(include='all'))

# Cek Missing Values
missing = df.isnull().sum()
print("\nMissing Values per Kolom:")
print(missing[missing > 0])

# Cek Nilai Unik
print("\nNilai Unik per Kolom:")
print(df.nunique())

# Cek Data Duplikat
print(f"\nJumlah Duplikat: {df.duplicated().sum()}")

# Visualisasi distribusi target
plt.figure(figsize=(10,5))
sns.countplot(x='NObeyesdad', data=df, palette='coolwarm')
plt.title('Distribusi Kategori Obesitas')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Visualisasi boxplot outlier
# Kolom-kolom numerik yang perlu dikonversi
numerical_columns = ['Age', 'Height', 'Weight', 'FCVC', 'NCP', 'CH2O', 'FAF', 'TUE']

# Loop melalui kolom numerik dan coba konversi ke numeric, errors='coerce' akan mengubah nilai yang tidak valid menjadi NaN
for col in numerical_columns:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Setelah konversi, Anda mungkin memiliki missing values (NaN) yang perlu ditangani
# Anda bisa memilih untuk menghapusnya atau melakukan imputasi
df_cleaned = df.dropna(subset=numerical_columns + ['NObeyesdad']) # Hapus baris dengan NaN di kolom numerik atau target

# Sekarang Anda dapat membuat boxplot dengan data yang sudah dikonversi
for col in numerical_columns:
    plt.figure(figsize=(12, 6))
    sns.boxplot(x='NObeyesdad', y=col, data=df_cleaned, palette='Set2')
    plt.title(f'Distribusi {col}')
    plt.xlabel('Kategori Obesitas')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()

print("Visualisasi boxplot telah ditampilkan.")

# Korelasi numerik
corr = df[num_cols].corr()
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Korelasi Antar Fitur Numerik")
plt.show()

"""### **3. Data Preprocessing**

Kesimpulan: Dataset dibersihkan dari outlier dan duplikat, dikonversi menjadi numerik, kelas target diseimbangkan dengan SMOTE, dan fitur diskalakan dengan standardisasi. Semua fitur digunakan.
"""

# Konversi numerik & drop NA
for col in num_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')
df.dropna(subset=num_cols + ['NObeyesdad'], inplace=True)

# Hapus duplikat
df.drop_duplicates(inplace=True)

# Deteksi dan tangani outlier
for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    df = df[(df[col] >= Q1 - 1.5 * IQR) & (df[col] <= Q3 + 1.5 * IQR)]

# Label Encoding target
le = LabelEncoder()
df['NObeyesdad'] = le.fit_transform(df['NObeyesdad'])

# One-hot encoding kategori
cat_cols = ['Gender', 'family_history_with_overweight', 'SMOKE', 'CAEC', 'MTRANS', 'FAVC', 'SCC', 'CALC']
df = pd.get_dummies(df, columns=cat_cols)

feature_names = X.columns.tolist()

import pickle
with open('features.pkl', 'wb') as f:
    pickle.dump(feature_names, f)
files.download('features.pkl')

# Pisahkan fitur dan label
X = df.drop('NObeyesdad', axis=1)
y = df['NObeyesdad']

# Pastikan semua kolom numerik Ubah ke numerik dan drop missing
X = X.apply(pd.to_numeric, errors='coerce')
X = X.dropna(axis=1, how='any')

# SMOTE untuk atasi imbalance
X_res, y_res = SMOTE(random_state=42).fit_resample(X, y)

# Normalisasi/Standardisasi
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_res)

"""### **4. Model Training & Evaluation (Before Tuning)**

Kesimpulan: Dari lima model klasifikasi, Random Forest menunjukkan performa tertinggi berdasarkan metrik akurasi dan F1-score.
"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_res, test_size=0.2, random_state=42, stratify=y_res)

models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42),
    'Random Forest': RandomForestClassifier(random_state=42),
    'KNN': KNeighborsClassifier(n_neighbors=5),
    'SVM': SVC(kernel='linear', probability=True, random_state=42)
}

results_before = []
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    results_before.append({
        'Model': name,
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred, average='weighted'),
        'Recall': recall_score(y_test, y_pred, average='weighted'),
        'F1 Score': f1_score(y_test, y_pred, average='weighted')
    })
    print(f"\n{name} Report (Before Tuning):")
    print(classification_report(y_test, y_pred))
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"Confusion Matrix - {name} (Before Tuning)")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.tight_layout()
    plt.show()

# Visualisasi Performa Awal
before_df = pd.DataFrame(results_before)
plt.figure(figsize=(10,6))
sns.barplot(data=before_df, x='Model', y='Accuracy', palette='Blues_d')
plt.title("Perbandingan Akurasi 5 Model Sebelum Tuning")
plt.ylim(0.5, 1.0)
plt.grid(axis='y')
plt.show()

"""### **5. Hyperparameter Tuning (Random Forest)**

Kesimpulan: GridSearchCV menemukan kombinasi parameter terbaik untuk Random Forest, meningkatkan akurasi dan stabilitas model.
"""

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}

grid_rf = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='accuracy')
grid_rf.fit(X_train, y_train)

print("\nBest Parameters (Random Forest):", grid_rf.best_params_)

"""### **6. Evaluation After Tuning**

Kesimpulan: Model Random Forest setelah tuning mengalami peningkatan performa. Metrik akurasi, presisi, recall dan F1-score meningkat.
"""

models_tuned = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42),
    'Random Forest': grid_rf.best_estimator_,
    'KNN': KNeighborsClassifier(n_neighbors=5),
    'SVM': SVC(kernel='linear', probability=True, random_state=42)
}

results_after = []
for name, model in models_tuned.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    results_after.append({
        'Model': name,
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred, average='weighted'),
        'Recall': recall_score(y_test, y_pred, average='weighted'),
        'F1 Score': f1_score(y_test, y_pred, average='weighted')
    })
    print(f"\n{name} Report (After Tuning):")
    print(classification_report(y_test, y_pred))

"""### **7. Visualisasi Perbandingan**

Kesimpulan: Visualisasi menunjukkan peningkatan performa model Random Forest setelah tuning, menjadikannya pilihan optimal.
"""

before_df['Type'] = 'Before Tuning'
after_df = pd.DataFrame(results_after)
after_df['Type'] = 'After Tuning'
compare_df = pd.concat([before_df, after_df])

plt.figure(figsize=(12, 6))
sns.barplot(data=compare_df, x='Model', y='Accuracy', hue='Type', palette='Set2')
plt.title("Perbandingan Akurasi Sebelum dan Sesudah Tuning")
plt.ylim(0.5, 1.0)
plt.grid(axis='y')
plt.show()

"""### **8. Simpan Model Terbaik**

Kesimpulan: Model terbaik (Random Forest setelah tuning) disimpan ke dalam file untuk digunakan lebih lanjut pada aplikasi Streamlit.
"""

best_model = grid_rf.best_estimator_
with open('model_obesitas.pkl', 'wb') as f:
    pickle.dump(best_model, f)
with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)
files.download('model_obesitas.pkl')
files.download('scaler.pkl')

import streamlit as st
import pickle
import numpy as np

# Load model dan scaler
with open("model_obesitas.pkl", "rb") as f:
    model = pickle.load(f)
with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)
with open("features.pkl", "rb") as f:
    feature_names = pickle.load(f)

# Tampilan kreatif
st.set_page_config(page_title="Klasifikasi Obesitas", page_icon="🥗", layout="wide")
st.title("🍔 Aplikasi Prediksi Kategori Obesitas")
st.markdown("Gunakan aplikasi ini untuk memprediksi kategori obesitas berdasarkan data gaya hidup dan fisik.")

st.sidebar.header("📋 Masukkan Data Anda")

def user_input_features():
    data = {}
    for feature in feature_names:
        if "Gender" in feature:
            data[feature] = st.sidebar.selectbox("Jenis Kelamin", ["Male", "Female", "Other"]) == feature
        elif "family_history_with_overweight" in feature:
            data[feature] = st.sidebar.selectbox("Riwayat keluarga obesitas?", ["yes", "no"]) == feature
        elif "SMOKE" in feature:
            data[feature] = st.sidebar.selectbox("Apakah Anda merokok?", ["yes", "no"]) == feature
        elif "FAVC" in feature:
            data[feature] = st.sidebar.selectbox("Apakah sering makan tinggi kalori?", ["yes", "no"]) == feature
        elif "CALC" in feature:
            data[feature] = st.sidebar.selectbox("Konsumsi alkohol", ["no", "Sometimes", "Frequently", "Always"]) == feature
        elif "MTRANS" in feature:
            data[feature] = st.sidebar.selectbox("Transportasi utama", ["Public_Transportation", "Walking", "Automobile", "Bike", "Motorbike"]) == feature
        elif "SCC" in feature:
            data[feature] = st.sidebar.selectbox("Apakah Anda memantau kalori?", ["yes", "no"]) == feature
        elif "CAEC" in feature:
            data[feature] = st.sidebar.selectbox("Frekuensi makanan di antara waktu makan", ["no", "Sometimes", "Frequently", "Always"]) == feature
        else:
            data[feature] = st.sidebar.number_input(f"{feature}", step=0.01)
    return np.array([list(data.values())])

input_data = user_input_features()

if st.button("🔍 Prediksi"):
    scaled_data = scaler.transform(input_data)
    prediction = model.predict(scaled_data)
    label = int(prediction[0])
    kategori = {
        0: "Insufficient Weight",
        1: "Normal Weight",
        2: "Overweight Level I",
        3: "Overweight Level II",
        4: "Obesity Type I",
        5: "Obesity Type II",
        6: "Obesity Type III"
    }
    st.success(f"Hasil Prediksi: **{kategori[label]}** ✅")
    st.balloons()





















































































